// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  emailVerified DateTime?
  emailAlt      String?
  image         String?  
  phoneNumber   String?
  name          String?
  firstName     String?
  lastName      String?
  website       String?
  github        String?
  linkedIn      String?
  location      String?
  accounts      Account[]
  sessions      Session[]
  educations    Education[]
  jobs          Job[]
  assistants    ChatGptAssistant[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Education {
  id          Int       @id @default(autoincrement())
  userId      String
  institution String?
  major       String?
  minor       String?
  startDate   String?
  endDate     String?
  graduated   Boolean?
  gpa         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id              Int       @id @default(autoincrement())
  userId          String
  employer        String
  location        String
  startDate       String
  endDate         String
  attendanceModel String
  stillWorksHere  Boolean
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatGptAssistant {
  id            Int       @id @default(autoincrement())
  userId        String
  externalId    String
  name          String
  instructions  String
  model         String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
